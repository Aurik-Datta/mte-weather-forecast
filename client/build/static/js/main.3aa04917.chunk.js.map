{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","gotResponse","setGotResponse","city","setCity","response","setResponse","cityDisplay","setCityDisplay","titleCase","str","_","startCase","lowerCase","className","style","backgroundColor","color","borderStyle","type","name","onChange","e","target","value","onClick","axios","get","then","res","console","log","toString","display","marginBottom","margin","borderRadius","padding","maxWidth","justifyContent","borderColor","Date","data","current","dt","toLocaleString","fontSize","temp","feels_like","weather","description","humidity","wind_speed","flexWrap","daily","map","day","weekday","min","max","showWeek","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3aa04917.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport _ from \"lodash\";\n\nfunction App() {\n  const [gotResponse, setGotResponse] = useState(false);\n  const [city, setCity] = useState('');\n  const [response, setResponse] = useState('');\n  const [cityDisplay, setCityDisplay]= useState('');\n\n  const submit = () => {\n    axios.get(\"/api/fetchWeather/\"+city)\n    .then((res)=>{\n      console.log(res['data']['daily'][0]['temp']['day'].toString())\n      setGotResponse(true)\n      setResponse(res)\n      setCityDisplay(city)\n      \n    });\n  }\n  const showWeek = () => {\n    return response?.data?.daily?.map(day => {\n      return(\n      <div style={{margin:4, borderRadius:25, borderStyle:\"groove\", padding:10, borderColor:'grey'}}>\n      <h3>{(new Date(day.dt*1000).toLocaleString(\"en\",{weekday:\"long\"}))}</h3>\n      <p style={{fontSize:24}}>{day.temp?.day.toString()}°C</p> \n      <p>{day.temp?.min.toString()}/{day.temp?.max.toString()}°C</p>\n      <p>{titleCase(day.weather[0]?.description)}</p>\n      <p> Humidity: {day.humidity.toString()}% </p>\n      <p> Wind Speed: {day.wind_speed.toString()} km/h</p>\n      </div>\n      )\n    });\n  }\n\n  const titleCase = (str) => {\n    return(_.startCase(_.lowerCase(str)));\n  }\n  \n  return (\n    <div className=\"App\">\n      <div>\n        <h1>Weather Forecast</h1>\n        <label>Enter City: </label>\n        <input style={{backgroundColor:\"#343a44\", color:\"white\", borderStyle:\"groove\"}} type=\"text\" name=\"city\" onChange={(e) => setCity(e.target.value)}/> \n        <button  style={{backgroundColor:\"#343a44\", color:\"white\", borderStyle:\"groove\"}} onClick={submit}>\n          Submit\n        </button>\n      </div>\n      <div style={{display: gotResponse ? 'block' : 'none'}}>\n        <h2 style={{marginBottom:5}}>Current Weather</h2> \n        <div style={{margin:\"auto\", borderRadius:25, borderStyle:\"groove\", padding:10, maxWidth:\"15%\", justifyContent:\"center\", borderColor:'grey'}}>\n          <h3 style={{marginBottom:0}}>{titleCase(cityDisplay)} </h3>\n          <h3 style={{justifyContent:\"center\"}}>{(new Date(response?.data?.current?.dt*1000).toLocaleString())}</h3>\n          <p style={{fontSize:24}}>{response?.data?.current?.temp.toString()}°C</p> \n          <p>Feels like: {response?.data?.current?.feels_like.toString()}</p>\n          <p>{titleCase(response?.data?.current?.weather[0]?.description)}</p>\n          <p>Humidity: {response?.data?.current?.humidity}%</p>\n          <p>Wind Speed: {response?.data?.current?.wind_speed} km/h</p>\n        </div>\n        <h2 style={{marginBottom:5}}>7-Day Weather Forecast</h2> \n        <div style={{display:\"flex\", flexWrap:\"wrap\", justifyContent: \"center\"}}>\n          {showWeek()}\n        </div>\n        \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}